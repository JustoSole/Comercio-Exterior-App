#!/usr/bin/env python3
"""
üß™ Test Deep NCM Classifier
============================

Script de prueba para verificar que el nuevo clasificador profundo de NCM
funciona correctamente con toda la funcionalidad implementada.
"""

import asyncio
import json
import os
import sys
from pathlib import Path

# Agregar directorio del proyecto al path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def test_debug_callback(message, data=None, level="INFO"):
    """Callback de debug para testing"""
    print(f"[{level}] {message}")
    if data and level in ["ERROR", "SUCCESS"]:
        print(f"    Data: {json.dumps(data, indent=2, ensure_ascii=False)[:200]}...")

async def test_deep_classifier():
    """Test del clasificador profundo"""
    print("üöÄ Iniciando test del Deep NCM Classifier...")
    
    try:
        # Verificar que la API key est√© disponible
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            print("‚ùå ERROR: No se encontr√≥ OPENAI_API_KEY en variables de entorno")
            return False
        
        # Importar el clasificador
        from ai_ncm_deep_classifier import DeepNCMClassifier
        
        # Crear instancia del clasificador
        classifier = DeepNCMClassifier(
            api_key=api_key,
            debug_callback=test_debug_callback
        )
        
        print("‚úÖ Clasificador inicializado correctamente")
        
        # Test con producto ejemplo
        test_products = [
            {
                "description": "Smartphone Samsung Galaxy A54 5G, pantalla AMOLED 6.4 pulgadas, 128GB almacenamiento, c√°mara triple 50MP+12MP+5MP, Android 13, color azul",
                "image_url": None,
                "expected_chapter": "85"  # Cap√≠tulo 85 - aparatos el√©ctricos
            },
            {
                "description": "Perfume para mujer Chanel No. 5, eau de parfum 100ml, fragancia floral aldeh√≠dica, presentado en caja de regalo",
                "image_url": None,
                "expected_chapter": "33"  # Cap√≠tulo 33 - aceites esenciales y perfumes
            }
        ]
        
        for i, test_product in enumerate(test_products, 1):
            print(f"\nüîç Test {i}: {test_product['description'][:50]}...")
            
            try:
                # Ejecutar clasificaci√≥n profunda
                result = await classifier.classify_product_deep(
                    description=test_product["description"],
                    image_url=test_product["image_url"]
                )
                
                if "error" in result:
                    print(f"‚ùå Error en clasificaci√≥n: {result['error']}")
                    continue
                
                # Verificar resultado
                final_classification = result.get('final_classification', {})
                if not final_classification:
                    print("‚ùå No se obtuvo clasificaci√≥n final")
                    continue
                
                # Mostrar resultados principales
                ncm_completo = final_classification.get('ncm_completo', 'N/A')
                confianza = final_classification.get('nivel_confianza', 'N/A')
                metodo = result.get('method', 'N/A')
                tiempo = result.get('processing_time_seconds', 0)
                
                print(f"‚úÖ Clasificaci√≥n exitosa:")
                print(f"   NCM: {ncm_completo}")
                print(f"   Confianza: {confianza}")
                print(f"   M√©todo: {metodo}")
                print(f"   Tiempo: {tiempo:.2f}s")
                
                # Verificar cap√≠tulo esperado
                if ncm_completo.startswith(test_product['expected_chapter']):
                    print(f"‚úÖ Cap√≠tulo correcto ({test_product['expected_chapter']})")
                else:
                    print(f"‚ö†Ô∏è Cap√≠tulo diferente al esperado (esperado: {test_product['expected_chapter']}, obtenido: {ncm_completo[:2]})")
                
                # Verificar fases del proceso
                process_steps = result.get('process_steps', [])
                print(f"   Fases completadas: {len(process_steps)}")
                
                for step in process_steps:
                    status_icon = {"completed": "‚úÖ", "error": "‚ùå", "started": "üü°"}.get(step.get('status', ''), "‚ö™")
                    print(f"     {status_icon} {step.get('phase', 'Unknown').replace('_', ' ').title()}")
                
                # Verificar tratamiento arancelario
                tratamiento = final_classification.get('tratamiento_arancelario', {})
                if tratamiento:
                    aec = tratamiento.get('derechos_importacion', 'N/A')
                    print(f"   AEC: {aec}")
                
                # Verificar r√©gimen simplificado
                regimen = final_classification.get('regimen_simplificado_courier', {})
                if regimen:
                    aplica = regimen.get('aplica', 'N/A')
                    print(f"   R√©gimen Simplificado: {aplica}")
                
            except Exception as e:
                print(f"‚ùå Error en test {i}: {e}")
                import traceback
                traceback.print_exc()
        
        print("\nüéâ Tests completados!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        print("   Verifica que ai_ncm_deep_classifier.py est√© disponible")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_ncm_official_integration():
    """Test de integraci√≥n con base de datos oficial NCM"""
    print("\nüîç Testing NCM Official Integration...")
    
    try:
        from ncm_official_integration import NCMOfficialIntegration
        
        integration = NCMOfficialIntegration()
        print("‚úÖ Integraci√≥n NCM inicializada")
        
        # Test b√∫squeda exacta
        test_codes = ["85287200", "8528.72.00"]
        
        for code in test_codes:
            print(f"\nüîé Probando c√≥digo: {code}")
            
            exact_match = integration.search_exact_ncm(code)
            if exact_match:
                print(f"   ‚úÖ Match exacto: {exact_match.get('description', 'N/A')[:50]}...")
                print(f"   Tipo: {exact_match.get('record_type', 'N/A')}")
                print(f"   AEC: {exact_match.get('tratamiento_arancelario', {}).get('aec', 0)}%")
            else:
                print(f"   ‚ùå No se encontr√≥ match exacto")
            
            # Test b√∫squeda jer√°rquica
            hierarchical = integration.search_hierarchical_ncm(code, max_results=3)
            print(f"   üîç Matches jer√°rquicos: {len(hierarchical)}")
            
            for match in hierarchical[:2]:  # Solo primeros 2
                print(f"     - {match.get('ncm_code', '')}: {match.get('description', '')[:40]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test de integraci√≥n NCM: {e}")
        return False

if __name__ == "__main__":
    print("üß™ DEEP NCM CLASSIFIER TESTS")
    print("=" * 40)
    
    async def run_all_tests():
        # Test 1: Clasificador profundo
        success1 = await test_deep_classifier()
        
        # Test 2: Integraci√≥n oficial NCM
        success2 = await test_ncm_official_integration()
        
        if success1 and success2:
            print("\nüéâ ¬°TODOS LOS TESTS PASARON!")
            print("\nüí° El sistema est√° listo para usar:")
            print("   - Clasificaci√≥n profunda con despachante de aduanas ‚úÖ")
            print("   - Exploraci√≥n jer√°rquica completa ‚úÖ") 
            print("   - Debug detallado ‚úÖ")
            print("   - Integraci√≥n con app principal ‚úÖ")
        else:
            print("\n‚ùå Algunos tests fallaron. Revisar configuraci√≥n.")
    
    asyncio.run(run_all_tests()) 