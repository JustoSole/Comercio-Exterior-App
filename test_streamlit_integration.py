#!/usr/bin/env python3
"""
üß™ Test Streamlit Integration - Prueba de Integraci√≥n Completa
============================================================

Script para probar la integraci√≥n completa del sistema mejorado
con la aplicaci√≥n principal de Streamlit.

Simula el flujo completo sin la interfaz gr√°fica.
"""

import asyncio
import os
import sys
from datetime import datetime

# Ya no se setea la variable de entorno aqu√≠, se lee desde secrets
# os.environ['OPENAI_API_KEY'] = "..."

try:
    from alibaba_scraper import scrape_single_alibaba_product
    from ai_ncm_classifier import AINcmClassifier
    from import_tax_calculator import calcular_impuestos_importacion
    from vuce_integration import VuceIntegration
    from product_dimension_estimator import ProductShippingEstimator
    from secrets_config import get_api_keys_dict, validate_setup
    print("‚úÖ Todos los m√≥dulos importados correctamente")
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    sys.exit(1)

# URL de prueba
TEST_URL = "https://www.alibaba.com/product-detail/32-inch-smart-tv-led-full_1600798765951.html"

async def test_complete_flow():
    """Probar el flujo completo de an√°lisis"""
    print("üöÄ INICIANDO PRUEBA DE FLUJO COMPLETO")
    print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')}")
    print("="*60)
    
    # Validar configuraci√≥n
    api_keys = get_api_keys_dict()
    if not validate_setup():
        print("‚ùå Configuraci√≥n de API keys incompleta")
        return False
    
    print("‚úÖ API keys configuradas correctamente")
    
    # === PASO 1: Scraping de Alibaba ===
    print("\nüì± PASO 1: Extrayendo datos de Alibaba")
    try:
        # Simular producto (ya que no tenemos URL real)
        class MockProduct:
            def __init__(self):
                self.title = "Smart TV LED 32 inch Full HD with WiFi and Remote Control"
                self.price_low = 85.0
                self.price_high = 120.0
                self.moq = "1 piece"
                self.place_of_origin = "China"
                self.categories = ["Consumer Electronics", "Television", "LED TV"]
                self.images = ["https://example.com/tv1.jpg", "https://example.com/tv2.jpg"]
                self.url = TEST_URL
        
        product = MockProduct()
        print(f"  ‚úÖ Producto extra√≠do: {product.title[:50]}...")
        print(f"  üí∞ Precio: ${product.price_low} - ${product.price_high}")
        
    except Exception as e:
        print(f"  ‚ùå Error en scraping: {e}")
        return False
    
    # === PASO 2: Clasificaci√≥n NCM con VUCE ===
    print("\nü§ñ PASO 2: Clasificaci√≥n NCM + Validaci√≥n VUCE")
    try:
        classifier = AINcmClassifier(api_keys.get("OPENAI_API_KEY"))
        
        # Descripci√≥n mejorada
        enhanced_description = f"{product.title} | Categor√≠as: {', '.join(product.categories)} | Origen: {product.place_of_origin} | Precio: ${product.price_low}-${product.price_high}"
        
        print(f"  üîç Descripci√≥n: {enhanced_description[:80]}...")
        
        # Clasificar con integraci√≥n VUCE
        ncm_result = await classifier.classify_product(
            description=enhanced_description,
            image_url=product.images[0] if product.images else None
        )
        
        if "error" in ncm_result:
            print(f"  ‚ùå Error en clasificaci√≥n: {ncm_result['error']}")
            return False
        
        print(f"  ‚úÖ NCM clasificado: {ncm_result.get('ncm_completo', 'N/A')}")
        print(f"  üéØ Confianza: {ncm_result.get('confianza', 'N/A')}")
        
        # Verificar datos VUCE
        if 'vuce_info' in ncm_result:
            vuce_info = ncm_result['vuce_info']
            print(f"  üá¶üá∑ VUCE Match: {'‚úÖ' if vuce_info.get('match_exacto') else '‚ùå'}")
            
            # Tratamiento arancelario
            treatment = ncm_result.get('tratamiento_arancelario', {})
            if treatment.get('fuente') == 'VUCE Oficial':
                print(f"  üí∞ Arancel (VUCE): {treatment.get('derechos_importacion', 'N/A')}")
            else:
                print(f"  üí∞ Arancel (IA): {treatment.get('derechos_importacion', 'N/A')}")
        
        # R√©gimen simplificado
        regime = ncm_result.get('regimen_simplificado_courier', {})
        final_decision = regime.get('aplica_final', regime.get('aplica', 'N/A'))
        print(f"  üöö R√©gimen Simplificado: {final_decision}")
        
        if 'vuce_warning' in ncm_result:
            print(f"  ‚ö†Ô∏è VUCE Warning: {ncm_result['vuce_warning']}")
        
    except Exception as e:
        print(f"  ‚ùå Error en clasificaci√≥n NCM: {e}")
        return False
    
    # === PASO 3: C√°lculo de impuestos ===
    print("\nüí∞ PASO 3: Calculando impuestos")
    try:
        precio_promedio = (product.price_low + product.price_high) / 2
        
        tax_result = calcular_impuestos_importacion(
            cif_value=precio_promedio,
            tipo_importador="responsable_inscripto",
            destino="reventa", 
            origen="extrazona",
            tipo_dolar="oficial",
            provincia="CABA"
        )
        
        print(f"  ‚úÖ Impuestos calculados: ${float(tax_result.total_impuestos):.2f}")
        print(f"  üìä Incidencia: {float(tax_result.incidencia_porcentual):.1f}%")
        
    except Exception as e:
        print(f"  ‚ùå Error calculando impuestos: {e}")
        return False
    
    # === PASO 4: Estimaci√≥n de dimensiones ===
    print("\nüì¶ PASO 4: Estimando dimensiones y peso")
    try:
        estimator = ProductShippingEstimator()
        
        # Simular datos del producto para el estimador
        product_dict = {
            'subject': product.title,
            'categories': product.categories,
            'mediaItems': [{'type': 'image', 'imageUrl': {'big': url}} for url in product.images],
            'productHtmlDescription': '',
            'productBasicProperties': []
        }
        
        shipping_details = estimator.get_shipping_details(product_dict)
        
        if shipping_details.get('weight_kg'):
            print(f"  ‚úÖ Peso estimado: {shipping_details['weight_kg']:.2f} kg")
        if shipping_details.get('dimensions_cm'):
            dims = shipping_details['dimensions_cm']
            print(f"  üìê Dimensiones: {dims.get('length', 'N/A')}x{dims.get('width', 'N/A')}x{dims.get('height', 'N/A')} cm")
        
        print(f"  üîß M√©todo: {shipping_details.get('method', 'N/A')}")
        
    except Exception as e:
        print(f"  ‚ùå Error estimando dimensiones: {e}")
        shipping_details = {"method": "failed_fallback"}
    
    # === PASO 5: C√°lculo de flete (simulado) ===
    print("\nüöö PASO 5: Calculando flete")
    try:
        # Simulaci√≥n de flete
        flete_costo = precio_promedio * 0.15  # 15% estimado
        print(f"  ‚úÖ Flete estimado: ${flete_costo:.2f}")
        
    except Exception as e:
        print(f"  ‚ùå Error calculando flete: {e}")
        return False
    
    # === PASO 6: Landed Cost Final ===
    print("\nüéØ PASO 6: C√°lculo Final")
    try:
        honorarios_despachante = precio_promedio * 0.02
        landed_cost = precio_promedio + float(tax_result.total_impuestos) + flete_costo + honorarios_despachante
        
        print(f"  üí∞ Precio producto: ${precio_promedio:.2f}")
        print(f"  üèõÔ∏è Impuestos: ${float(tax_result.total_impuestos):.2f}")
        print(f"  üöö Flete: ${flete_costo:.2f}")
        print(f"  üë§ Despachante: ${honorarios_despachante:.2f}")
        print(f"  üéØ LANDED COST: ${landed_cost:.2f}")
        
        markup = ((landed_cost - precio_promedio) / precio_promedio) * 100
        print(f"  üìà Markup total: {markup:.1f}%")
        
    except Exception as e:
        print(f"  ‚ùå Error en c√°lculo final: {e}")
        return False
    
    print("\n" + "="*60)
    print("üèÅ PRUEBA COMPLETADA EXITOSAMENTE")
    print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')}")
    print("="*60)
    
    # Resumen de resultados
    print(f"\nüìä RESUMEN:")
    print(f"  ‚Ä¢ NCM: {ncm_result.get('ncm_completo', 'N/A')}")
    print(f"  ‚Ä¢ VUCE: {'‚úÖ Validado' if ncm_result.get('vuce_info', {}).get('match_exacto') else '‚ùå No validado'}")
    print(f"  ‚Ä¢ R√©gimen Simplificado: {final_decision}")
    print(f"  ‚Ä¢ Landing Cost: ${landed_cost:.2f} USD")
    print(f"  ‚Ä¢ Todos los m√≥dulos funcionando: ‚úÖ")
    
    return True

if __name__ == "__main__":
    success = asyncio.run(test_complete_flow())
    
    if success:
        print("\nüéâ ¬°SISTEMA COMPLETAMENTE FUNCIONAL!")
        print("‚úÖ Listo para usar en la aplicaci√≥n Streamlit")
    else:
        print("\n‚ùå Hay errores en el sistema")
        print("üîß Revisar logs y corregir antes de usar")
        sys.exit(1) 