#!/usr/bin/env python3
"""
üèõÔ∏è NCM Official Integration - Integraci√≥n con Base de Datos Oficial NCM
========================================================================

M√≥dulo que integra el sistema de clasificaci√≥n con la base de datos oficial
de c√≥digos NCM extra√≠da de los PDFs oficiales usando el sistema h√≠brido.

Reemplaza la funcionalidad obsoleta de scraping VUCE con datos oficiales
procesados localmente.

Funcionalidades:
- B√∫squeda exacta de c√≥digos NCM en base de datos oficial
- B√∫squeda jer√°rquica inteligente
- Enriquecimiento con datos arancelarios oficiales
- Validaci√≥n y normalizaci√≥n de c√≥digos
- An√°lisis de r√©gimen simplificado actualizado

Autor: Desarrollado para comercio exterior argentino
"""

import os
import json
import re
import logging
from typing import Dict, List, Optional, Union, Any, Tuple
from pathlib import Path
import pandas as pd
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

class NCMOfficialIntegration:
    """Integraci√≥n con la base de datos oficial NCM procesada localmente"""
    
    def __init__(self, dataset_path: Optional[str] = None):
        """
        Inicializar la integraci√≥n con base de datos oficial NCM
        
        Args:
            dataset_path: Ruta al dataset consolidado. Si None, busca autom√°ticamente.
        """
        self.dataset_path = self._find_latest_dataset(dataset_path)
        self.ncm_data = None
        self.load_dataset()
        
    def _find_latest_dataset(self, custom_path: Optional[str] = None) -> Optional[Path]:
        """Encuentra el dataset m√°s reciente de NCM"""
        if custom_path:
            return Path(custom_path)
            
        # Buscar en la carpeta de resultados
        results_dir = Path("pdf_reader/ncm/resultados_ncm_hybrid")
        if not results_dir.exists():
            logger.error(f"Directorio de resultados no encontrado: {results_dir}")
            return None
            
        # Buscar archivos de dataset consolidado
        dataset_files = list(results_dir.glob("dataset_ncm_HYBRID_FIXED_*.json"))
        if not dataset_files:
            logger.error("No se encontraron datasets NCM consolidados")
            return None
            
        # Retornar el m√°s reciente
        latest_file = max(dataset_files, key=lambda f: f.stat().st_mtime)
        logger.info(f"Usando dataset NCM: {latest_file}")
        return latest_file
        
    def load_dataset(self) -> bool:
        """Carga el dataset de NCM en memoria"""
        if not self.dataset_path or not self.dataset_path.exists():
            logger.error(f"Dataset no encontrado: {self.dataset_path}")
            return False
            
        try:
            with open(self.dataset_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            # Extraer registros
            self.ncm_data = data.get('records', [])
            metadata = data.get('metadata', {})
            
            logger.info(f"Dataset cargado exitosamente:")
            logger.info(f"  - Total registros: {len(self.ncm_data):,}")
            logger.info(f"  - Versi√≥n: {metadata.get('version', 'N/A')}")
            logger.info(f"  - Cap√≠tulos: {metadata.get('total_chapters', 'N/A')}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error cargando dataset: {e}")
            return False
            
    def normalize_ncm_code(self, ncm_code: str) -> str:
        """Normaliza c√≥digo NCM eliminando puntos, espacios y guiones"""
        if not ncm_code:
            return ""
        return re.sub(r'[.\s-]', '', str(ncm_code).strip())
        
    def search_exact_ncm(self, ncm_code: str) -> Optional[Dict[str, Any]]:
        """B√∫squeda exacta de c√≥digo NCM"""
        if not self.ncm_data:
            return None
            
        normalized_code = self.normalize_ncm_code(ncm_code)
        
        # Buscar por c√≥digo exacto
        for record in self.ncm_data:
            if record.get('code_searchable') == normalized_code:
                return self._enrich_ncm_record(record)
                
        return None
        
    def search_hierarchical_ncm(self, ncm_code: str, max_results: int = 5) -> List[Dict[str, Any]]:
        """B√∫squeda jer√°rquica de c√≥digos NCM similares"""
        if not self.ncm_data:
            return []
            
        normalized_code = self.normalize_ncm_code(ncm_code)
        matches = []
        
        # B√∫squeda por prefijo (jerarqu√≠a)
        for length in [8, 6, 4, 2]:  # Buscar desde m√°s espec√≠fico a m√°s general
            prefix = normalized_code[:length]
            if len(prefix) >= 2:  # M√≠nimo un cap√≠tulo
                for record in self.ncm_data:
                    record_code = record.get('code_searchable', '')
                    if record_code.startswith(prefix) and len(matches) < max_results:
                        enriched_record = self._enrich_ncm_record(record)
                        enriched_record['match_type'] = f'hierarchical_{length}digits'
                        enriched_record['match_score'] = self._calculate_match_score(normalized_code, record_code)
                        matches.append(enriched_record)
                        
            if matches:  # Si encontramos matches en este nivel, retornar
                break
                
        # Ordenar por score de similitud
        matches.sort(key=lambda x: x.get('match_score', 0), reverse=True)
        return matches[:max_results]
        
    def _calculate_match_score(self, query_code: str, record_code: str) -> float:
        """Calcula score de similitud entre c√≥digos"""
        if not query_code or not record_code:
            return 0.0
            
        # Score basado en longitud de prefijo com√∫n
        common_prefix = 0
        min_length = min(len(query_code), len(record_code))
        
        for i in range(min_length):
            if query_code[i] == record_code[i]:
                common_prefix += 1
            else:
                break
                
        return common_prefix / max(len(query_code), len(record_code))
        
    def _enrich_ncm_record(self, record: Dict[str, Any]) -> Dict[str, Any]:
        """Enriquece un registro NCM con informaci√≥n adicional"""
        enriched = {
            'ncm_code': record.get('code', ''),
            'ncm_code_normalized': record.get('code_searchable', ''),
            'sim_code': record.get('sim', ''),
            'description': record.get('description', ''),
            'chapter': record.get('chapter', 0),
            'record_type': record.get('record_type', 'unknown'),
            'hierarchy_level': record.get('hierarchy_level', 0),
            'parent_code': record.get('parent', ''),
            
            # Datos arancelarios oficiales
            'tratamiento_arancelario': {
                'aec': float(record.get('aec', 0)),  # Arancel Externo Com√∫n
                'die': float(record.get('die', 0)),  # Derecho de Importaci√≥n Espec√≠fico
                'te': float(record.get('te', 3.0)),   # Tasa Estad√≠stica (default 3%)
                'de': float(record.get('de', 0)),    # Derecho de Exportaci√≥n
                're': float(record.get('re', 0)),    # Reintegro de Exportaci√≥n
                'in_code': record.get('in', ''),     # C√≥digo IN oficial
                'iva': 21.0,                         # IVA Argentina
                'iva_adicional': 0.0,
                'fuente': 'Base de Datos Oficial NCM'
            },
            
            # An√°lisis de r√©gimen simplificado
            'regimen_simplificado': self._analyze_simplified_regime(record),
            
            # Intervenciones potenciales
            'intervenciones_detectadas': self._detect_interventions(record),
            
            # Metadatos
            'source_metadata': {
                'extraction_method': 'official_database',
                'file_source': record.get('file', ''),
                'data_quality': 'high',
                'last_updated': datetime.now().isoformat()
            }
        }
        
        return enriched
        
    def _analyze_simplified_regime(self, record: Dict[str, Any]) -> Dict[str, Any]:
        """Analiza si el producto puede aplicar al r√©gimen simplificado"""
        chapter = record.get('chapter', 0)
        ncm_code = record.get('code', '')
        description = record.get('description', '').lower()
        
        # Cap√≠tulos t√≠picamente excluidos del r√©gimen simplificado
        excluded_chapters = [22, 24, 30]  # Bebidas, tabaco, farmac√©uticos
        potentially_excluded = [87, 88, 89, 93]  # Veh√≠culos, armas
        
        if chapter in excluded_chapters:
            return {
                'aplica_potencialmente': False,
                'razon': f'Cap√≠tulo {chapter} excluido del r√©gimen simplificado',
                'factores_verificar': ['Autorizaci√≥n ANMAT/SENASA requerida'],
                'observaciones': 'Producto t√≠picamente excluido por normativa'
            }
            
        elif chapter in potentially_excluded:
            return {
                'aplica_potencialmente': False,
                'razon': f'Cap√≠tulo {chapter} generalmente excluido',
                'factores_verificar': ['Verificar con organismo competente'],
                'observaciones': 'Requiere verificaci√≥n espec√≠fica'
            }
            
        else:
            # Cap√≠tulos que generalmente S√ç aplican
            favorable_chapters = [84, 85, 61, 62, 63, 95]  # Electr√≥nicos, textiles, juguetes
            
            return {
                'aplica_potencialmente': chapter in favorable_chapters,
                'razon': f'Cap√≠tulo {chapter} {"favorable" if chapter in favorable_chapters else "neutral"} para r√©gimen simplificado',
                'factores_verificar': [
                    'Valor CIF ‚â§ USD 3,000',
                    'Peso ‚â§ 50kg',
                    'Courier habilitado',
                    'Sin restricciones espec√≠ficas'
                ],
                'observaciones': 'Sujeto a l√≠mites de valor y peso'
            }
            
    def _detect_interventions(self, record: Dict[str, Any]) -> List[str]:
        """Detecta posibles intervenciones seg√∫n el cap√≠tulo NCM"""
        chapter = record.get('chapter', 0)
        description = record.get('description', '').lower()
        
        interventions = []
        
        # Mapeo de cap√≠tulos a organismos
        # Productos agropecuarios y alimentarios
        if 1 <= chapter <= 24:
            interventions.append('SENASA')
        
        # Farmac√©uticos
        if chapter == 30:
            interventions.append('ANMAT')
            
        # Cosm√©ticos
        if chapter == 33:
            interventions.append('ANMAT')
            
        # Productos el√©ctricos/electr√≥nicos
        if chapter in [84, 85]:
            interventions.append('INTI-CIE')
            
        # Veh√≠culos (generalmente no aplica r√©gimen)
        if chapter in [87, 88, 89]:
            interventions.append('INTI')
            
        # Juguetes
        if chapter == 95:
            interventions.append('INTI')
            
        # Armas (generalmente no aplica r√©gimen)
        if chapter == 93:
            interventions.append('ANMaC')
                
        # Detecci√≥n adicional por palabras clave
        if any(word in description for word in ['electronic', 'electr', 'bateria', 'cargador']):
            if 'INTI-CIE' not in interventions:
                interventions.append('INTI-CIE')
                
        if any(word in description for word in ['juguete', 'toy', 'ni√±o']):
            if 'INTI' not in interventions:
                interventions.append('INTI')
                
        return interventions
        
    def _is_intermediate_position(self, record: Dict[str, Any]) -> bool:
        """Detecta si una posici√≥n NCM es intermedia (tiene subcategor√≠as)"""
        # Criterio principal: record_type debe ser 'subcategory'
        record_type = record.get('record_type', '')
        
        # Es intermedia si es expl√≠citamente marcada como subcategor√≠a
        is_subcategory = record_type == 'subcategory'
        
        # Log para debugging
        if is_subcategory:
            logger.info(f"‚úÖ Posici√≥n intermedia detectada: {record.get('ncm_code', 'N/A')} (record_type = {record_type})")
        
        return is_subcategory
        
    def get_subcategories(self, parent_code: str) -> List[Dict[str, Any]]:
        """Obtiene todas las subcategor√≠as hijas de un c√≥digo NCM"""
        if not self.ncm_data:
            return []
            
        normalized_parent = self.normalize_ncm_code(parent_code)
        subcategories = []
        
        logger.info(f"üîç Buscando subcategor√≠as para c√≥digo padre: {parent_code} (normalizado: {normalized_parent})")
        
        for record in self.ncm_data:
            record_code = record.get('code_searchable', '')
            record_type = record.get('record_type', '')
            sim_code = record.get('sim', '')
            
            # Buscar registros terminales que tengan el mismo c√≥digo base pero con SIM diferente
            # Ejemplo: padre "61159500" (subcategory) -> hijos "61159500" con SIM "100P", "200V", etc. (terminal)
            if (record_code == normalized_parent and 
                record_type == 'terminal' and 
                sim_code and sim_code.strip()):
                
                enriched = self._enrich_ncm_record(record)
                subcategories.append(enriched)
                logger.debug(f"   Encontrada subcategor√≠a: {record.get('code', 'N/A')} SIM:{sim_code} - {record.get('description', 'N/A')[:50]}...")
                
        logger.info(f"üìä Total subcategor√≠as encontradas: {len(subcategories)}")
        
        # Ordenar por SIM code para mantener orden l√≥gico
        subcategories.sort(key=lambda x: x.get('sim_code', ''))
        return subcategories
        
    async def refine_ncm_with_llm(self, initial_position: Dict[str, Any], 
                                  product_description: str) -> Dict[str, Any]:
        """
        Refina la clasificaci√≥n NCM usando un segundo LLM cuando hay subcategor√≠as
        """
        # Verificar si la posici√≥n inicial es intermedia
        if not self._is_intermediate_position(initial_position):
            logger.info("Posici√≥n ya es terminal, no requiere refinamiento")
            return initial_position
            
        # Obtener subcategor√≠as
        parent_code = initial_position.get('ncm_code', '')
        subcategories = self.get_subcategories(parent_code)
        
        if not subcategories:
            logger.warning(f"No se encontraron subcategor√≠as para {parent_code}")
            return initial_position
            
        logger.info(f"Encontradas {len(subcategories)} subcategor√≠as para refinamiento")
        
        # Preparar opciones para el LLM
        subcategory_options = []
        for i, subcat in enumerate(subcategories, 1):
            aec = subcat.get('tratamiento_arancelario', {}).get('aec', 0)
            description = subcat.get('description', '')
            code = subcat.get('ncm_code', '')
            
            subcategory_options.append(f"{i}. {code} - {description} (AEC: {aec}%)")
            
        options_text = "\n".join(subcategory_options)
        
        # Prompt para el LLM de refinamiento
        refinement_prompt = f"""Eres un especialista en clasificaci√≥n arancelaria NCM. 

Se encontr√≥ la categor√≠a general: {parent_code} - {initial_position.get('description', '')}

Pero necesitas elegir la subcategor√≠a espec√≠fica m√°s apropiada para este producto:
"{product_description}"

Opciones disponibles:
{options_text}

INSTRUCCIONES:
1. Analiza cuidadosamente la descripci√≥n del producto
2. Compara con las opciones disponibles
3. Elige la subcategor√≠a M√ÅS ESPEC√çFICA y APROPIADA
4. Responde √öNICAMENTE con el n√∫mero de la opci√≥n elegida (1, 2, 3, etc.)
5. NO agregues explicaciones adicionales

Tu respuesta debe ser solo el n√∫mero:"""

        try:
            # Importar OpenAI para el refinamiento
            from openai import OpenAI
            import os
            
            # Obtener API key
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                try:
                    import streamlit as st
                    api_key = st.secrets["api_keys"]["OPENAI_API_KEY"]
                except:
                    pass
                    
            if not api_key:
                logger.error("No se encontr√≥ API key de OpenAI para refinamiento")
                return initial_position
                
            client = OpenAI(api_key=api_key)
            
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Eres un especialista en clasificaci√≥n arancelaria. Responde solo con n√∫meros."},
                    {"role": "user", "content": refinement_prompt}
                ],
                temperature=0,
                max_tokens=10
            )
            
            llm_response = response.choices[0].message.content.strip()
            logger.info(f"LLM de refinamiento respondi√≥: '{llm_response}'")
            
            # Extraer n√∫mero de la respuesta
            import re
            number_match = re.search(r'\b(\d+)\b', llm_response)
            
            if number_match:
                chosen_index = int(number_match.group(1)) - 1  # Convertir a √≠ndice base 0
                
                if 0 <= chosen_index < len(subcategories):
                    chosen_subcategory = subcategories[chosen_index]
                    
                    logger.info(f"‚úÖ LLM eligi√≥ subcategor√≠a: {chosen_subcategory.get('ncm_code')} - {chosen_subcategory.get('description')}")
                    
                    # Enriquecer con informaci√≥n del refinamiento
                    chosen_subcategory['refinement_info'] = {
                        'was_refined': True,
                        'original_code': parent_code,
                        'total_options': len(subcategories),
                        'chosen_option': chosen_index + 1,
                        'llm_response': llm_response
                    }
                    
                    return chosen_subcategory
                else:
                    logger.error(f"√çndice fuera de rango: {chosen_index}")
            else:
                logger.error(f"No se pudo extraer n√∫mero de la respuesta: '{llm_response}'")
                
        except Exception as e:
            logger.error(f"Error en refinamiento con LLM: {e}")
            
        # Si algo falla, retornar la posici√≥n original
        logger.warning("Refinamiento fall√≥, usando posici√≥n original")
        return initial_position
        
    def _build_complete_ncm_code(self, record: Dict[str, Any]) -> str:
        """Construye el c√≥digo NCM completo incluyendo sufijo SIM si existe"""
        base_code = record.get('ncm_code', '')
        sim_code = record.get('sim_code', '')
        
        if sim_code and sim_code.strip():
            # Formato est√°ndar: c√≥digo_base + ' ' + sufijo_SIM
            # Ejemplo: "8528.72.00 100W" o "8528.72.00.100"
            complete_code = f"{base_code} {sim_code}"
            logger.info(f"‚úÖ C√≥digo NCM completo construido: {complete_code}")
            return complete_code
        else:
            return base_code

    async def get_ncm_info(self, ncm_code: str, product_description: str = None) -> Dict[str, Any]:
        """
        Funci√≥n principal para obtener informaci√≥n de NCM
        Mantiene compatibilidad con la interfaz anterior de VUCE
        
        Args:
            ncm_code: C√≥digo NCM a buscar
            product_description: Descripci√≥n del producto para refinamiento autom√°tico
        """
        if not self.ncm_data:
            return {
                'success': False,
                'error': 'Base de datos NCM no disponible',
                'ncm_code': ncm_code
            }
            
        # B√∫squeda exacta primero
        exact_match = self.search_exact_ncm(ncm_code)
        if exact_match:
            # Verificar si necesita refinamiento y si tenemos descripci√≥n del producto
            if product_description and self._is_intermediate_position(exact_match):
                logger.info(f"Posici√≥n intermedia detectada para {ncm_code}, iniciando refinamiento...")
                refined_match = await self.refine_ncm_with_llm(exact_match, product_description)
                
                return {
                    'success': True,
                    'match_exacto': True,
                    'was_refined': refined_match.get('refinement_info', {}).get('was_refined', False),
                    'posicion_encontrada': {
                        'codigo': self._build_complete_ncm_code(refined_match),
                        'descripcion': refined_match['description']
                    },
                    'tratamiento_arancelario': refined_match['tratamiento_arancelario'],
                    'regimen_simplificado': refined_match['regimen_simplificado'],
                    'intervenciones': {
                        'organismos_potenciales': refined_match['intervenciones_detectadas']
                    },
                    'metadata': refined_match['source_metadata'],
                    'refinement_info': refined_match.get('refinement_info', {})
                }
            else:
                return {
                    'success': True,
                    'match_exacto': True,
                    'was_refined': False,
                    'posicion_encontrada': {
                        'codigo': self._build_complete_ncm_code(exact_match),
                        'descripcion': exact_match['description']
                    },
                    'tratamiento_arancelario': exact_match['tratamiento_arancelario'],
                    'regimen_simplificado': exact_match['regimen_simplificado'],
                    'intervenciones': {
                        'organismos_potenciales': exact_match['intervenciones_detectadas']
                    },
                    'metadata': exact_match['source_metadata']
                }
            
        # B√∫squeda jer√°rquica si no hay match exacto
        hierarchical_matches = self.search_hierarchical_ncm(ncm_code)
        if hierarchical_matches:
            best_match = hierarchical_matches[0]
            
            # Verificar si el mejor match necesita refinamiento
            if product_description and self._is_intermediate_position(best_match):
                logger.info(f"Match jer√°rquico intermedio detectado para {ncm_code}, iniciando refinamiento...")
                refined_match = await self.refine_ncm_with_llm(best_match, product_description)
                
                return {
                    'success': True,
                    'match_exacto': False,
                    'was_refined': refined_match.get('refinement_info', {}).get('was_refined', False),
                    'posicion_encontrada': {
                        'codigo': self._build_complete_ncm_code(refined_match),
                        'descripcion': refined_match['description']
                    },
                    'tratamiento_arancelario': refined_match['tratamiento_arancelario'],
                    'regimen_simplificado': refined_match['regimen_simplificado'],
                    'intervenciones': {
                        'organismos_potenciales': refined_match['intervenciones_detectadas']
                    },
                    'metadata': refined_match['source_metadata'],
                    'match_info': {
                        'type': best_match.get('match_type', 'hierarchical'),
                        'score': best_match.get('match_score', 0),
                        'alternatives': len(hierarchical_matches)
                    },
                    'refinement_info': refined_match.get('refinement_info', {})
                }
            else:
                return {
                    'success': True,
                    'match_exacto': False,
                    'was_refined': False,
                    'posicion_encontrada': {
                        'codigo': self._build_complete_ncm_code(best_match),
                        'descripcion': best_match['description']
                    },
                    'tratamiento_arancelario': best_match['tratamiento_arancelario'],
                    'regimen_simplificado': best_match['regimen_simplificado'],
                    'intervenciones': {
                        'organismos_potenciales': best_match['intervenciones_detectadas']
                    },
                    'metadata': best_match['source_metadata'],
                    'match_info': {
                        'type': best_match.get('match_type', 'hierarchical'),
                        'score': best_match.get('match_score', 0),
                        'alternatives': len(hierarchical_matches)
                    }
                }
            
        # No se encontr√≥ informaci√≥n
        return {
            'success': False,
            'error': f'No se encontr√≥ informaci√≥n para el c√≥digo NCM: {ncm_code}',
            'ncm_code': ncm_code,
            'suggestions': 'Verificar que el c√≥digo NCM sea v√°lido'
        }
        
    def get_chapter_summary(self, chapter: int) -> Dict[str, Any]:
        """Obtiene resumen de un cap√≠tulo espec√≠fico"""
        if not self.ncm_data:
            return {}
            
        chapter_records = [r for r in self.ncm_data if r.get('chapter') == chapter]
        
        if not chapter_records:
            return {'error': f'No se encontraron datos para el cap√≠tulo {chapter}'}
            
        return {
            'chapter': chapter,
            'total_records': len(chapter_records),
            'record_types': {
                record_type: len([r for r in chapter_records if r.get('record_type') == record_type])
                for record_type in set(r.get('record_type', 'unknown') for r in chapter_records)
            },
            'terminal_positions': len([r for r in chapter_records if r.get('record_type') == 'terminal']),
            'has_fiscal_data': len([r for r in chapter_records if r.get('aec', 0) > 0])
        }
        
    def validate_ncm_format(self, ncm_code: str) -> Dict[str, Any]:
        """Valida el formato de un c√≥digo NCM"""
        if not ncm_code:
            return {'valid': False, 'error': 'C√≥digo NCM vac√≠o'}
            
        # Patterns v√°lidos para NCM
        patterns = [
            r'^\d{4}\.\d{2}\.\d{2}$',      # Formato completo: 1234.56.78
            r'^\d{8}$',                     # Sin puntos: 12345678
            r'^\d{4}\.\d{2}$',             # Parcial: 1234.56
            r'^\d{6}$',                     # Parcial sin puntos: 123456
            r'^\d{4}$',                     # Solo partida: 1234
            r'^\d{2}$'                      # Solo cap√≠tulo: 12
        ]
        
        normalized = self.normalize_ncm_code(ncm_code)
        
        for pattern in patterns:
            if re.match(pattern, ncm_code) or re.match(pattern.replace(r'\.', ''), normalized):
                return {
                    'valid': True,
                    'normalized': normalized,
                    'format': 'valid_ncm',
                    'length': len(normalized)
                }
                
        return {
            'valid': False,
            'error': 'Formato de c√≥digo NCM inv√°lido',
            'expected_formats': ['1234.56.78', '12345678', '1234.56', '123456', '1234', '12']
        }

# Instancia global para uso f√°cil
_ncm_integration_instance = None

def get_ncm_integration() -> NCMOfficialIntegration:
    """Obtiene instancia singleton de la integraci√≥n NCM"""
    global _ncm_integration_instance
    if _ncm_integration_instance is None:
        _ncm_integration_instance = NCMOfficialIntegration()
    return _ncm_integration_instance

# Funci√≥n de compatibilidad para reemplazar VUCE
async def get_ncm_info_official(ncm_code: str, product_description: str = None) -> Dict[str, Any]:
    """
    Funci√≥n de compatibilidad que reemplaza la funcionalidad de VUCE
    usando la base de datos oficial NCM
    
    Args:
        ncm_code: C√≥digo NCM a buscar
        product_description: Descripci√≥n del producto para refinamiento autom√°tico
    """
    integration = get_ncm_integration()
    return await integration.get_ncm_info(ncm_code, product_description)

if __name__ == "__main__":
    # Test b√°sico
    import asyncio
    
    async def test_integration():
        integration = NCMOfficialIntegration()
        
        # Test con c√≥digo de ejemplo
        test_codes = ["8528.72.00", "84", "8528"]
        
        for code in test_codes:
            print(f"\nüîç Probando c√≥digo: {code}")
            result = await integration.get_ncm_info(code)
            
            if result.get('success'):
                print(f"‚úÖ Encontrado: {result['posicion_encontrada']['descripcion'][:100]}...")
                print(f"   Match exacto: {result.get('match_exacto', 'N/A')}")
                if result.get('match_info'):
                    print(f"   Score: {result['match_info']['score']:.2f}")
            else:
                print(f"‚ùå Error: {result.get('error', 'Desconocido')}")
    
    asyncio.run(test_integration()) 